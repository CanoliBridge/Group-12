# File: partition_solver.py
# Author: Jacob Warren
# Solves: 5.1.51

import os 
import sys
import json

# Append the parent directory to the path so we can import in utility
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from solvers.util import strings
from solvers.util import exceptions

'''
==========
parameters
==========
set_string: a string containing the inputted set
    - example: "{a, b, c, 23}" 
    - restrictions: if the element has commas in it, it must either be a set, a tuple, or 
                    a list
partition_string: a string containing the inputted partition
    - example: "{{a, b}, {c, 23}}"
    - restrictions: the elements must all be sets, the union of all elements 
                    must be equal to the set, and the elements must be disjoint
======
result
======
relation_string: a string representing the equivalence relation generated by the 
                 partition.
'''
def solve(set_string, partition_string):

    checkString1 = set_string
    checkString1 = checkString1.replace("{", "")
    checkString1 = checkString1.replace("}", "")
    checkString1 = checkString1.replace(",", "")
    checkString1 = checkString1.replace(" ", "")
    checkString2 = partition_string
    checkString2 = checkString2.replace("{", "")
    checkString2 = checkString2.replace("}", "")
    checkString2 = checkString2.replace(",", "")
    checkString2 = checkString2.replace(" ", "")
    errorString = ""
    for letter in checkString1:
        if letter not in checkString2:
            errorString += letter + ","
    if errorString != "":
        raise exceptions.CalculateError(f"Partition is missing elements: " + errorString)
    errorString = ""
    for letter in checkString2:
        if letter not in checkString1:
            errorString += letter + ","
    if errorString != "":
        raise exceptions.CalculateError(f"Partition has extra elements: " + errorString)

    set_list = strings.parse_set(set_string)
    partition_list = strings.parse_set(partition_string)
    set_ = {i for i in range(0, len(set_list))}
    set_counter = [0 for i in range(0, len(set_list))]
    partition = []
    
    for piece_string in partition_list:
        piece_string = strings.parse_set(piece_string)
        piece = set()

        for a in piece_string:
            try:
                i = set_list.index(a)
                piece.add(i)
                if set_counter[i] > 0:
                    raise exceptions.CalculateError(f"Element {a} appears in multiple pieces.")
                set_counter[i] = 1
            except ValueError:
                raise exceptions.CalculateError(f"Element {a} is not in the set.")
        
        partition.append(piece)

    relation_string = "{"
    collection = set()

    for piece in partition:
        collection |= piece

        for a in piece:
            for b in piece:
                relation_string += f"({set_list[a]}, {set_list[b]}), "

    if collection != set_:
        raise exceptions.CalculateError(f"Partition is missing elements.")

    if collection:
        relation_string = relation_string[:-2]

    relation_string += "}"

    # Convert the relation_string to JSON
    result = {
        "Equivalence Relation": relation_string
    }

    return json.dumps(result)
